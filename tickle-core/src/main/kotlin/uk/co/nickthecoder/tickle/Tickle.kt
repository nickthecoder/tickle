package uk.co.nickthecoder.tickle

import javafx.application.Application
import org.lwjgl.glfw.GLFW
import org.lwjgl.glfw.GLFWErrorCallback
import org.lwjgl.opengl.GL
import uk.co.nickthecoder.tickle.editor.Editor
import uk.co.nickthecoder.tickle.graphics.Window
import uk.co.nickthecoder.tickle.resources.Resources
import uk.co.nickthecoder.tickle.sound.SoundManager
import uk.co.nickthecoder.tickle.util.JsonResources
import java.io.File

/**
 * The main entry point for the tickle demo, and also used to create a new bare-bones project
 * for your own new game.
 *
 * Your own game should contain a similar main entry point, which also calls namedMain,
 * but instead of passing the programName "tickle", it should pass the name of your game.
 *
 * Note. The programName must be the same name as the script generated by gradle installApp
 * (which is simply the name of the directory that the build.gradle script is contained).
 */
fun main(args: Array<String>) {
    namedMain("tickle", args)
}

/**
 * See [help] for usage information.
 */
fun namedMain(programName: String, args: Array<String>) {

    var resourcesFile: File? = null
    var startEditor = false
    var showHelp = false
    var sceneName: String? = null
    var fullScreen: Boolean? = null
    var newWizard = false

    var i = 0
    while (i < args.size) {
        when (args[i]) {
            "--help" -> showHelp = true
            "--new" -> newWizard = true
            "--editor" -> startEditor = true
            "--fullscreen" -> fullScreen = true
            "--windowed" -> fullScreen = false
            "--scene" -> {
                i++
                if (i < args.size) {
                    sceneName = args[i]
                } else {
                    help(programName)
                    return
                }
            }
            else -> {
                if (resourcesFile == null) {
                    resourcesFile = File(args[i]).absoluteFile
                } else {
                    help(programName)
                    return
                }
            }
        }
        i++
    }

    if (showHelp) {
        help(programName)

    } else if (newWizard) {
        Application.launch(NewGameWizardApp::class.java)

    } else {

        if (resourcesFile == null) {
            resourcesFile = guessTickleFile()
        }
        if (resourcesFile == null) {
            System.err.println("No '.tickle' file found in directory './resources' or './src/dist/resources'")
            System.err.println()
            help(programName)
            System.exit(1)
        }

        if (startEditor) {
            println("Starting editor using resources file : $resourcesFile")
            resourcesFile?.let { Editor.start(it) }
        } else {
            println("Starting game using resources file : $resourcesFile")
            resourcesFile?.let { startGame(it, sceneName, fullScreen) }
        }
    }
}

/**
 * Prints usage information to the console.
 */
private fun help(programName: String) {
    println("Usage : $programName [--scene SCENE_NAME] [--fullscreen] [--windowed] [RESOURCE_FILE] (Starts the game)")
    println("Or    : $programName --editor [RESOURCE_FILE] (Starts the editor)")
    println("Or    : $programName --new (Starts a wizard to aid creating a new game)")
    println("Or    : $programName --help (Prints short usages instructions)")
    println()
    println("Note. When starting the game, or the editor, there is normally no need to specify the RESOURCE_FILE")
    println("Instead, let tickle find it automatically, which it does by looking for the first '.tickle' file in : ")
    println("'./src/dist/resources/'\nor\n './resources/'")
    println()
}

/**
 * Looks for a file with an extension of '.tickle' within "./src/dist/resources" or "./resources".
 */
fun guessTickleFile(): File? {
    // When running from dev environment, the resources are in src/dist/resources, but will be in resources
    // when running from an install application.
    val srcDist = File(File("src"), "dist")
    val resourceDir = if (srcDist.exists()) {
        File(srcDist, "resources")
    } else {
        File("resources")
    }
    return resourceDir.listFiles()?.filter { it.extension == "tickle" }?.sortedBy { it.lastModified() }?.lastOrNull()
}

/**
 * Starts the game (not the editor).
 */
fun startGame(resourcesFile: File, scenePath: String? = null, fullScreen: Boolean? = null) {

    // Setup an error callback.
    GLFWErrorCallback.createPrint(System.err).set()

    if (!GLFW.glfwInit()) {
        throw IllegalStateException("Unable to initialize GLFW")
    }

    val json = JsonResources(resourcesFile)
    val gameInfo = json.loadGameInfo()

    val window = Window(gameInfo.title, gameInfo.width, gameInfo.height, fullScreen = if (fullScreen == null) gameInfo.fullScreen else fullScreen)
    window.show()
    GL.createCapabilities()

    val resources = json.loadResources()
    Game(window, resources).run(scenePath ?: Resources.instance.sceneFileToPath(resources.gameInfo.initialScenePath))

    // Clean up OpenGL and OpenAL
    window.delete()
    SoundManager.cleanUp()
    GLFW.glfwTerminate()
    GLFW.glfwSetErrorCallback(null).free()
}
