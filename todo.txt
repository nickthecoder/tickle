BUGS
====

Add/Delete/Rename costumes, and the CostumePicker doesn't update.

Current Work
============

Next
====

The tickle.util package is a mishmash. Has utilities for Tickle AND stuff for game designers.

ScriptManager has listeners which it informs about reloads (including errors).
    Use this to position cursor to errors
    New tab type, which lists errors during scan().
New tab type Script Log.
    A message whenever a script is (re)loaded.
    Double click to open the script.
    "Clear" button next to "Save"
New ScriptException, which includes line number and column number (both? optional)

F4 on a class name opens the help window at the appropriate place.

Code snippets
    e.g. Move Forward, Move Towards, Die, Change Costume, Change Size

Intellisense as much as possible

Hover help
    Floating popups of javadoc comments for methods/fields.

Allow images to be DRAGGED into the resources tree.
    If it OUTSIDE of the resources directory, then copy it.
        Use the Pose's name as the filename (and error if that file already exists).
    Still prompt for a NAME
    Consider scanning the resources tree for new files (i.e. not existing Textures)
        Maybe as a button, rather than automatically.
        Option to DELETE the file, or create a new resource.

    Ditto for Fonts and sounds.


Test joints in the Demo

CodeEditor 2nd pass of syntax.
    Search for ^import\s(.*)\s$, remembering all the imports
    Look for \\b[A-Z][\w]*\\b, and check if they are in the imports.
        If not, add a "UnknownClass" range (a new sub class).
        Then right click (or Alt+Enter) presents the possible imports
    Need to exclude all classes in java.lang



Finish Drunk Invaders! (thus proving that Groovy is well integrated within Tickle)
    More levels
    Convert "countdowns" to delays?

Double click an existing Pose within a Texture to recreate its bounds.
    Maybe a context menu, with double click to open the Pose's tab.

Block Based Programming (Scratch style)


Long Standing BUGS
------------------

InputPicker :
    Java FX key code name "Number Sign" does not map to anything in enum class Key
    "Windows" is this meta?
    Shift, Control, alt etc don't work either.

Later
=====

Key combos, such as Shift+XXX and Ctrl+XXX

Key input to have a "ghosting" test, where multiple key presses are displayed, to help avoid certain key combinations.

In-Game input mapper, allowing user to change existing inputs (but not add new ones).
    JavaFX or OpenGL?
    OpenGL
        Game is not reliant on JavaFX or Paratask
        Can use LWJGL's input stuff, therefore no confusion over keyboard mappings.
        Harder to code though.

Allow text style to be overridden in the SceneEditor.
    Only save the overridden values if they differ from the Costume's values.


TextStyle to have an extraSpacing property which causes letters to be moved further apart
    Ditto for extra line height.

Game based on "flocking" :	https://www.youtube.com/watch?v=M028vafB0l8

XRayStageView
    Age Of Empires style outline of actors hidden behind buildings.
        Use a z buffer?
    Render all buildings and movables in one pass as a normal IsometricStageView (ordered based on Actor's Y position)
        Render all movables to an off-screen buffer using their outline images. (Tagged "REVEAL")
        Render all buildings to an off-screen buffer using just their masks (Tagged "HIDES")
        Combine the two using logical AND
        Render the result to the window.
    Note. when rendering the outlines, it would be nice to do this in two stages, one for a white outline,
    and again for a coloured thinner image coloured based on who's side the character belongs to.
    Rather than have multiple overlapping views, have one compound view, so that we only need to scroll the compound view.

I may also need to use Kotlin AND java annotations to look for attributes (assuming Groovy supports java annotations).
I may need a new interface for script languages which do not conform to the way I search for properties/attributes.
    If the class implements ScriptedAttributes, then use ScriptedAttributes.listAttributes() and
    ScriptedAttributes.listCostumeAttributes() ???
    How well will JPython work with Tickle???


Fog of War (FogOfWarFilter???)
    Filter which objects to render based on their proximity to friendly units.
    Note, this should NOT be a StageView, but a new interface RoleFilter.
    The default filter should be NoFilter, which always returns true.
    Problem. Cannot use nearest "friendly", because the nearest may have a short range, whereas a
    further "friendly" with a greater range WILL see it. Hmm. Tricky.

Fog of War 2 (FogOfWarMap)
    Only render places corresponding to places that can be seen.
    Create a scaled image corresponding to the whole map.
    Every n frames (if they have moved) draw circles from each observer (friendly units and buildings) onto the map
    Render the scene to an off-screen buffer, and combine the alpha with the map to form the final image.
    Note, later, roles could be specialised to see in non-circular shapes (cones in a given direction).

These two fog of wars can be used together!

MiniMap
    A mini view of the world
    Updated every N frames.
    If the Role is of type Chartable, then get the image using Chartable.chartPose(), otherwise ignore it.
    Uses a RoleFilter to decide which roles are included on the chart.
    Maybe have a ChartableRoleFilter, so that it can only return Chartable Roles.
    If not, then emit a warning the first time a non-chartable role is returned.

# Much Later
