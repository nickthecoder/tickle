BUGS
====

Copy a Pose, thumbnail doesn't appear.
    Ditto when a Pose is changed.

Rename a pose in a group, and the original remains???

Add/Delete/Rename costumes, and the CostumePicker doesn't update.

Current Work
============

Adding to CostumesGroup needs extra care (list contains 2 types of children).
Ditto for scenes

Next
====

Allow images to be DRAGGED into the resources tree.
    If it OUTSIDE of the resources directory, then copy it.
        Use the Pose's name as the filename (and error if that file already exists).
    Still prompt for a NAME
    Consider scanning the resources tree for new files (i.e. not existing Textures)
        Maybe as a button, rather than automatically.
        Option to DELETE the file, or create a new resource.

    Ditto for Fonts and sounds.


Test joints in the Demo

CodeEditor 2nd pass of syntax.
    Search for ^import\s(.*)\s$, remembering all the imports
    Look for \\b[A-Z][\w]*\\b, and check if they are in the imports.
        If not, add a "UnknownClass" range (a new sub class).
        Then right click (or Alt+Enter) presents the possible imports
    Need to exclude all classes in java.lang



Finish Drunk Invaders! (thus proving that Groovy is well integrated within Tickle)
    More levels
    Convert "countdowns" to delays?

ScriptManager has listeners which it informs about reloads (including errors).
    Use this to position cursor to errors
    New tab type, which lists errors during scan().
New tab type Script Log.
    A message whenever a script is (re)loaded.
    Double click to open the script.
    "Clear" button next to "Save"
New ScriptException, which includes line number and column number (both? optional)

F4 on a class name opens the help window at the appropriate place.
    If there are multiple matches, then popup the package names.

Double click an existing Pose within a Texture to recreate its bounds.
    Maybe a context menu, with double click to open the Pose's tab.

Make editorTab.needsSaving a Property, and use that to change the button states.
    bind to CodeEditor's dirty.

Remove kotlin scripting for FX Coder, and replace with Groovy.
    Not least to get rid of the damn warning!


Long Standing BUGS
------------------

InputPicker :
    Java FX key code name "Number Sign" does not map to anything in enum class Key
    "Windows" is this meta?
    Shift, Control, alt etc don't work either.


New Features
============

Key combos, such as Shift+XXX and Ctrl+XXX

Editor to allow resources to be reloaded.

Key input to have a "ghosting" test, where multiple key presses are displayed, to help avoid certain key combinations.

In-Game input mapper, allowing user to change existing inputs (but not add new ones).
    JavaFX or OpenGL?
    OpenGL
        Game is not reliant on JavaFX or Paratask
        Can use LWJGL's input stuff, therefore no confusion over keyboard mappings.
        Harder to code though.

Allow text style to be overriden in the SceneEditor.
    Only save the overridden values if they differ from the Costume's values.

Editor
    Allow a texture to be reloaded (Texture and ImageCache).

    Prevent deletion of textures used by a pose
    Prevent deletion of poses used by a costume

    Pose tab to have a list of costumes using it
        In a "minor tab"?
        Or just a button which opens all costumes using that pose.

Ensure Textures are deleted when removed from resources (Use finalise?).


Block Based Programming
-----------------------

I'd really like to avoid "tick", and instead be one big block of code, that has init stuff at the top,
and a while loop afterwards.

This can be done with Actions.

Block types :

Move By (dx,dy), Move To (x,y), Rotate By (degrees), Rotate To (degrees), Rotate Towards ( x, y )
HeadTowards( x, y ), Set Heading (degrees), Adjust Heading (degrees), Forwards (distance) etc.

(Note that all have a direction, so that Forwards can be implemented).

While, Until (no for)

If (condition), else


### A simplified editor
To go with a "simpler" block-based language, the resources editor should also be easier.
No "Inputs", no "Layouts", no separation of "Pose" and "Costume", No "Events" etc.

Limited to a single window, which cannot be resized (but the size CAN be chosen).
A single Layout with a single Stage, and a single View.
Sounds are added by simply dragging a sound file into the editor
   A window appears, where you give it a unique name (which defaults to the filename without the extension).
Likewise, a Pose/Costume is created by dragging an image into the editor.
   All such Pose/Costumes can act as both a Pose and a Costume.
   These can have a "Hide" boolean, which prevents them appearing in the Scene Editor.
       We could include ALL such things, but order favouring those with the most code (so complex items
       will naturally be at the top of the list!)
   Maybe all images are automatically combined into a single Texture, or a separate Texture is created for each.
   But Textures are never mentioned in any way!
Include one or more fonts by default
Editor Preferences are hidden
No Physics engine
How Producer/Director is handled can be left till later!
   Can easily have a single Producer (which is initially empty)
   Maybe do away with Director, and if we want resuable code appearing on multiple scenes, then use a
       "Role", which is made invisible (or just off-screen).

The Scene Editor can display the Attributes panel, and the "Costume Picker" at the same time.
The "Actors" and the "Layers" panels can be ignored.

# Later

Add more to the "demo" test suites.

Create a test suite for the editor too.
    Much of this will need the help of paratask

Add all native code (not only the current OS) into tickle-core
(otherwise it will only work on one platform when distributed).
Or maybe, create tickle-natives-linux etc AND tickle-natives-all
    Demo can then depend on the 'current' OS, and 3rd party games can choose

TextStyle to have an extraSpacing property which causes letters to be moved further apart
    Ditto for extra line height.

Game based on "flocking" :	https://www.youtube.com/watch?v=M028vafB0l8

XRayStageView
    Age Of Empires style outline of actors hidden behind buildings.
        Use a z buffer?
    Render all buildings and movables in one pass as a normal IsometricStageView (ordered based on Actor's Y position)
        Render all movables to an off-screen buffer using their outline images. (Tagged "REVEAL")
        Render all buildings to an off-screen buffer using just their masks (Tagged "HIDES")
        Combine the two using logical AND
        Render the result to the window.
    Note. when rendering the outlines, it would be nice to do this in two stages, one for a white outline,
    and again for a coloured thinner image coloured based on who's side the character belongs to.
    Rather than have multiple overlapping views, have one compound view, so that we only need to scroll the compound view.

I may also need to use Kotlin AND java annotations to look for attributes (assuming Groovy supports java annotations).
I may need a new interface for script languages which do not conform to the way I search for properties/attributes.
    If the class implements ScriptedAttributes, then use ScriptedAttributes.listAttributes() and
    ScriptedAttributes.listCostumeAttributes() ???
    How well will JPython work with Tickle???


Fog of War (FogOfWarFilter???)
    Filter which objects to render based on their proximity to friendly units.
    Note, this should NOT be a StageView, but a new interface RoleFilter.
    The default filter should be NoFilter, which always returns true.
    Problem. Cannot use nearest "friendly", because the nearest may have a short range, whereas a
    further "friendly" with a greater range WILL see it. Hmm. Tricky.

Fog of War 2 (FogOfWarMap)
    Only render places corresponding to places that can be seen.
    Create a scaled image corresponding to the whole map.
    Every n frames (if they have moved) draw circles from each observer (friendly units and buildings) onto the map
    Render the scene to an off-screen buffer, and combine the alpha with the map to form the final image.
    Note, later, roles could be specialised to see in non-circular shapes (cones in a given direction).

These two fog of wars can be used together!

MiniMap
    A mini view of the world
    Updated every N frames.
    If the Role is of type Chartable, then get the image using Chartable.chartPose(), otherwise ignore it.
    Uses a RoleFilter to decide which roles are included on the chart.
    Maybe have a ChartableRoleFilter, so that it can only return Chartable Roles.
    If not, then emit a warning the first time a non-chartable role is returned.

# Much Later
