Current Work
============

Nine-patches
	SceneEditor needs to ask for width and height when the Actor uses a NinePatch.
		Maybe for ALL actors, and it just updates the scale appropriately for non-nine patches.
		Default size should be the size of the Pose it is based upon.
	SceneEditor should render the NinePatch too (not the pose)!
	Also ask for the aligment.

Next
====


Companion actors?
	An actor has a set of Companion objects, which has an Actor and a CompanionPosition (interface)
	which update the position and direction of the companion.
	The CompanionPosition are automatically called after all ticks have taken place.
		During the drawing of the StageView?
			Pro : Don't need an extra loop
			Con : Will be called multiple times when there are multiple views of the same stage.
	Actor.createChild and createChildOnStage can optionally take a CompanionFollower
	Have a MarginPosition, which keeps the same direction, and makes the size bigger by the given margins.

Re-implement rounded rectangles using just a single polygon
	A huristic for the number of lines to create a curve based on the radius.
	Draw using a rounded rod as a rounded rectangle, not a rect and two circles

PoseChoiceParameter, which is a MenuButton with a hierarchical menu, rather than a simple ChoiceParameter.
	Ditto for CostumeChoiceParameter
	Similar for RoleParameter. Add separator for each package.


Undo/Redo in scene editor
	Changes :
		New ActorResource
		Delete ActorResource
		ActorResource changes stage
		Edit ActorResource
			Can be changed by editing Parameters or by dragging
			When a Parameter change event is fired, store the name of the parameter, and its old and new value.
			When dragging a handle, just let the above handle it?
		OR add a new listeners on ActorResource (each field has a set(v) method).
			When moving an actorResource (or set of), then treat this differently??

		Note. dragging multiple ActorResources may need to be handled in a different way???
		Ignore snap data for now.

		

BUGS
====

Scene.adjustActors is not being called directly. Should it?

Attributes now depends on paratask-core, and therefore a running game also depends upon it. Grr.
	I only want the EDITOR to depend on paratask-core.
	Have a factory method for Attributes, which checks Class.forName( "uk...paratask...Parameter" )
		It either returns Attributes (which has no parameter stuff) of DesignAttributes
		Then cast wherever they are used in the editor.
		Add an extension function : SceneActor.designAttributes() which does the cast. Ditto for Costume
	Also, "UglyPrint" is in paratask-core.

InputPicker :
	Java FX key code name "Number Sign" does not map to anything in enum class Key
	"Windows" is this meta?
	Shift, Control, alt etc don't work either.


Possible Optimisatins
---------------------
	
PixelOverlapping
	Don't clear the whole overlapTexture
	Consider making "lineTexture" a smaller, fixed width, and doing a nested loop over x.

StageView.findActorsAt and findRolesAt to use Neighbourhood.
	Maybe have an interface, and a Slow implementation which iterates over all actors as the default.
	Any Stage/StageView can then replace the Slow implementation with the Neighbourhood.

New Features
------------

Pose thumbnail
	Scale, Fit (% along)

Key input to have a "ghosting" test, where multiple key presses are displayed, to help avoid certain key combinations.
	Also create a GUI suitable for launching from within the game to adjust *existing* inputs.
	Include "reset"
	Save to a separate file in user's config directory.
		<aybe make it part of the (un-coded) "Preferences" class

Allow text style to be overriden in the SceneEditor.
	Only save the overridden values if they differ from the Costume's values.

Editor
	Allow a texture to be reloaded (Texture and ImageCache).
	
	Prevent deletion of textures used by a pose
	Prevent deletion of poses used by a costume

	Pose tab to have a list of costumes using it
		In a "minor tab"?
		Or just a button which opens all costumes using that pose.

PoseTab should show the whole Texture, with a single shaded rectangle to show the position.
	Double click to auto adjust the pose's rectangle and offset.
	Make it a resuable copmonent, which can show one or many shaded rectangles.

Mouse
	Find Actors at a point
		Overlapping, or using pixel data

Ensure Textures are deleted when removed from resources (Use finalise?).

Later
=====

TextStyle to have an extraSpacing property which causes letters to be moved further appart
	Ditto for extra line height.

Create a simpler GUI that a "published" game can use to let players change the input mappings.

Game based on "flocking" :	https://www.youtube.com/watch?v=M028vafB0l8

Split the project into multiple modules
	core
	demo
	editor

RevealStageView
	Age Of Empires style outline of actors hidden behind buildings.
	Render all buildings and movables in one pass as a normal IsometricStageView (ordered based on Actor's Y position)
		Render all movables to an off-screen buffer using their outline images. (Tagged "REVEAL")
		Render all buildings to an off-screen buffer using just their masks (Tagged "HIDES")
		Combine the two using logical AND
		Render the result to the window.
	Note. when rendering the outlines, it would be nice to do this is two stages, one for a white outline,
	and again for a coloured thinner image coloured based on who's side the character belongs to.
	Rather than have multiple overlapping views, have one compound view, so that we only need to scroll the compound view.
FogOfWarStageView
	Filter which objects to render based on their proximity to friendly units.
UncharteredStageView
	Draw the scenery to off-screen buffer
	Draw white blobs on revealed places
	Merge using logical AND

Much Later
==========

New Game Wizard
	Choice of a completely blank project, or a "Hello World"
	Hello World will have a font, a Play director and a Splash director
		Splash will display some simple text and a button to lauch "level01"
		Maybe also have a "Player" Role

